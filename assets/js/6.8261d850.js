(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{295:function(t,s,a){t.exports=a.p+"assets/img/1659958431415.968ef9fe.png"},311:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[s("a",{attrs:{href:"#operators"}},[t._v("Operators")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#rule"}},[t._v("Rule")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#ooo"}},[t._v("ooo")])])]),t._v(" "),s("h1",{attrs:{id:"operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),s("p",[t._v("This chart shows the operators that can be overloaded.")]),t._v(" "),s("p",[s("img",{attrs:{src:a(295),alt:"1659958431415"}})]),t._v(" "),s("p",[t._v("4 operators cannot be overloaded:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("::")]),t._v("(scope resolution),")]),t._v(" "),s("li",[s("code",[t._v(".")]),t._v("(member access),")]),t._v(" "),s("li",[s("code",[t._v(".*")]),t._v("(member access through pointer to member),")]),t._v(" "),s("li",[s("code",[t._v("?:")]),t._v("(ternary conditional)")])]),t._v(" "),s("h1",{attrs:{id:"rule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule"}},[t._v("#")]),t._v(" Rule")]),t._v(" "),s("p",[t._v("运算符函数的名称是以关键字"),s("code",[t._v("operator")]),t._v("为前缀的.")]),t._v(" "),s("p",[t._v("e.g. We need our "),s("code",[t._v("+")]),t._v(" operator to return a new MyClass object with a member variable equal to the sum of the two objects' member variables.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    MyClass "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        MyClass res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("var"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("var "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("var"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    MyClass "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("obj1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("obj2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    MyClass res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("var"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"ooo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ooo"}},[t._v("#")]),t._v(" ooo")]),t._v(" "),s("p",[t._v("通过运算符重载，只能改变运算符原有的"),s("strong",[t._v("操作数类型")]),t._v("(而不是优先级, 操作数个数).")]),t._v(" "),s("p",[t._v("成员函数是否:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("有的运算符只能作为成员函数重载 (定义为非成员函数时, 会编译错误):")]),t._v(" "),s("p",[t._v("赋值"),s("code",[t._v("=")]),t._v(", 下标"),s("code",[t._v("[]")]),t._v(", 调用"),s("code",[t._v("()")]),t._v(", 指针的成员访问"),s("code",[t._v("-＞")]),t._v(", 所有的类型转换运算符.")])]),t._v(" "),s("li",[s("p",[t._v("有些运算符函数不能定义为类的成员函数，如I/O操作符")])]),t._v(" "),s("li",[s("p",[t._v("有的运算符可以作为非成员函数重载: 算术运算符、相等运算符")])])]),t._v(" "),s("p",[s("code",[t._v("++x")]),t._v("等效的运算符函数调用形式为"),s("code",[t._v("x.operator++()")])])])}),[],!1,null,null,null);s.default=r.exports}}]);